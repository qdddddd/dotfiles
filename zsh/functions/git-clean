# Shows you the largest objects in your repo's pack file.
# Written for osx.
    #
    # @see http://stubbisms.wordpress.com/2009/07/10/git-script-to-show-largest-pack-objects-and-trim-your-waist-line/
    # @author Antony Stubbs

# function git-clean {
if ! is-true "$(command git rev-parse --is-inside-work-tree 2> /dev/null)"; then
    print "$0: not a repository work tree: $PWD" >&2
    return 1
elif [[ "$PWD" != "$(git-root)" ]]; then
    print "$0: must be run from the root of the work tree" >&2
    return 1
fi

for branch in `git branch -a | grep remotes | grep -v HEAD | grep -v master`; do
    command git branch --track ${branch##*/} $branch
done

#set -x

echo "Discovering large files...\n"
# set the internal field spereator to line break, so that we can iterate easily over the verify-pack output
IFS='\n';

# list all objects including their size, sort by size, take top 10
objects=`command git verify-pack -v .git/objects/pack/pack-*.idx | grep -v chain | sort -k3nr | head`

echo "All sizes are in kB. The pack column is the size of the object, compressed, inside the pack file."

output="size,pack,SHA,location"
for y in $objects
do
    # extract the size in bytes
    size=$((`echo $y | cut -f 5 -d ' '`/ 1024))
    # extract the compressed size in bytes
    compressedSize=$((`echo $y | cut -f 6 -d ' '`/ 1024))
    # extract the SHA
    sha=`echo $y | cut -f 1 -d ' '`
    # find the objects location in the repository tree
    other=`command git rev-list --all --objects | grep $sha`
    #lineBreak=`echo -e "\n"`
    output="${output}\n${size},${compressedSize},${other}"
done

echo -e $output | column -t -s ', '

echo "\nCleaning files and reclaiming space...\n"

# Clean the files
command git filter-branch --tag-name-filter cat --index-filter 'git rm -r --cached --ignore-unmatch filename' --prune-empty -f -- --all

# Reclaim space
rm -rf .git/refs/original/
command git reflog expire --expire=now --all
command git gc --prune=now

echo "\nReclaiming space...\n"
git gc --aggressive --prune=now

return 0

# }
